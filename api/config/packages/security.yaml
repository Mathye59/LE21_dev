security:
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]
    
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    
    firewalls:
        # Firewall pour les assets (CSS, JS, images)
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        # Firewall STATELESS pour l'API publique (pas de sessions, pas d'auth)
        api_public:
            pattern: ^/api
            stateless: true
            security: false  # Pas d'authentification requise pour l'API publique
            lazy: true
        # Firewall STATEFUL pour l'admin et le site (avec sessions et login)
        main:
            lazy: true
            provider: app_user_provider
            entry_point: App\Security\LoginFormAuthenticator
            
            logout:
                path: app_logout
            
            custom_authenticator: App\Security\LoginFormAuthenticator
            
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /

    # Contrôle d'accès
    access_control:
        - { path: ^/api, roles: PUBLIC_ACCESS }          # API publique accessible à tous
        - { path: ^/reset-password, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_USER }            # Admin nécessite connexion
        - { path: ^/, roles: ROLE_USER }                 # Reste du Back nécessite connexion
         
when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10